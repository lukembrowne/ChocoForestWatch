name: Deploy (build on droplet)

on:
  push:
    branches: [main]          # production branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: SSH into droplet, pull latest code, rebuild & restart
        uses: appleboy/ssh-action@v1.0.3
        with:
          host:    ${{ secrets.DO_HOST }}
          username: root
          key:     ${{ secrets.DO_SSH_KEY }}
          script: |
            set -euo pipefail

            # 1. Make sure the repo is present
            cd /root/opt || mkdir -p /root/opt && cd /root/opt
            if [ -d ChocoForestWatch/.git ]; then
              echo "Repo exists – pulling latest commit"
              cd ChocoForestWatch
              git pull --ff-only
            else
              echo "Cloning repo for the first time"
              git clone --depth 1 git@github.com:lukembrowne/ChocoForestWatch.git
              cd ChocoForestWatch
            fi

            # 2. Load environment file (already on server) – optional sanity check
            test -f .env.prod || { echo ".env.prod missing!"; exit 1; }

            # 3. Source .env.prod to load environment variables into this script
            set -a
            source .env.prod
            set +a

            # 3. Build the images locally on the droplet
            # Always use production settings when deploying
            docker compose -f docker-compose.prod.yml down
            docker compose -f docker-compose.prod.yml build \
            --build-arg VITE_API_URL="${VITE_API_URL}" \
            --build-arg VUE_APP_PLANET_API_KEY="${VUE_APP_PLANET_API_KEY}" \
            --build-arg VITE_SENTRY_DSN="${VITE_SENTRY_DSN}" \
            --build-arg DJANGO_DEBUG="${DJANGO_DEBUG}" 
            docker compose -f docker-compose.prod.yml up -d --build

            # 5. Optional: prune dangling images to save disk
            docker image prune -f