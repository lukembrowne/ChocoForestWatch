name: Run Tests

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Create .env file for testing
        run: |
          echo "POSTGRES_DB=test_db" >> .env
          echo "POSTGRES_USER=test_user" >> .env
          echo "POSTGRES_PASSWORD=test_pass" >> .env
          echo "POSTGRES_HOST=db" >> .env
          echo "POSTGRES_PORT=5432" >> .env
          echo "DB_HOST=local" >> .env
          echo "DB_PORT=5432" >> .env
          echo "DJANGO_DEBUG=true" >> .env
          echo "AWS_ACCESS_KEY_ID=test_key" >> .env
          echo "AWS_SECRET_ACCESS_KEY=test_secret" >> .env
          echo "AWS_S3_ENDPOINT=https://test.endpoint.com" >> .env
          echo "AWS_REGION=us-east-1" >> .env
          echo "VITE_API_URL=http://localhost:8000" >> .env
          echo "VITE_TITILER_URL=http://localhost:8083" >> .env
          echo "TITILER_URL=http://localhost:8083" >> .env
          echo "BOUNDARY_GEOJSON_PATH=/app/boundaries/ecuador.geojson" >> .env
          echo "DEFAULT_PUBLIC_PROJECT_ID=1" >> .env
          echo "VITE_DEFAULT_PUBLIC_PROJECT_ID=1" >> .env
          
      - name: Build Docker containers for testing
        run: |
          docker compose up -d --build db backend
          # Wait for database to be ready
          sleep 10
          
      - name: Run ML Pipeline Unit Tests
        run: |
          docker compose exec -T backend bash -c "cd /app && /app/ml_pipeline/run_tests.sh unit"
          
      - name: Run ML Pipeline Integration Tests  
        run: |
          docker compose exec -T backend bash -c "cd /app && /app/ml_pipeline/run_tests.sh integration"
          
      - name: Run Quick Tests (All Tests, No Coverage)
        run: |
          docker compose exec -T backend bash -c "cd /app && /app/ml_pipeline/run_tests.sh quick"
          
      - name: Generate Test Coverage Report
        run: |
          docker compose exec -T backend bash -c "cd /app && /app/ml_pipeline/run_tests.sh coverage" || true
          # Copy coverage report from container
          docker compose cp backend:/app/ml_pipeline/htmlcov ./htmlcov || true
          
      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: htmlcov/
          retention-days: 30
          
      - name: Cleanup
        if: always()
        run: |
          docker compose down -v